services:
#  spring-1:
#    build: .
#    environment:
#      - SERVER_PORT=8080
#    ports:
#      - "8080:8080"
#    depends_on:
#      redis-node-1:
#        condition: service_healthy
#      redis-node-2:
#        condition: service_healthy
#      redis-node-3:
#        condition: service_healthy
#      slave-node-1:
#        condition: service_healthy
#      slave-node-2:
#        condition: service_healthy
#      slave-node-3:
#        condition: service_healthy
#      redis-cluster-entry:
#        condition: service_healthy

  mysql:
    container_name: mysql
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: spoteditor
      MYSQL_DATABASE: spoteditor
    ports:
      - "3306:3306"
    volumes:
      - ./mysql_data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD" ]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:management-alpine
    container_name: rabbit-mq-container
    hostname: rabbitmq
    environment:
      - RABBITMQ_ERLANG_COOKIE=rabbitmqCookie
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin

  redis-node-1:
    image: redis
    container_name: redis-test1
    volumes:
      - ./conf/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - 6380:6380
      - 6381:6381
      - 6379:6379
      - 7380:7380
      - 7381:7381
      - 7379:7379

  redis-node-2:
    network_mode: "service:redis-node-1"
    image: redis
    container_name: redis-test2
    volumes:
      - ./conf/redis1.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  redis-node-3:
    network_mode: "service:redis-node-1"
    image: redis
    container_name: redis-test3
    volumes:
      - ./conf/redis2.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  slave-node-1:
    network_mode: "service:redis-node-1"
    image: redis
    container_name: redis-slave-test1
    volumes:
      - ./conf/slave.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  slave-node-2:
    network_mode: "service:redis-node-1"
    image: redis
    container_name: redis-slave-test2
    volumes:
      - ./conf/slave1.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  slave-node-3:
    network_mode: "service:redis-node-1"
    image: redis
    container_name: redis-slave-test3
    volumes:
      - ./conf/slave2.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  redis-cluster-entry:
    network_mode: "service:redis-node-1"
    image: redis
    container_name: redis-cluster-entry
#   프로덕션용
    command: >
      redis-cli --cluster create
      redis-test1:6379 redis-test2:6380 redis-test3:6381
      redis-slave-test1:7379 redis-slave-test2:7380 redis-slave-test3:7381
      --cluster-replicas 1 --cluster-yes
#    로컬용
#    command: >
#      redis-cli --cluster create
#      127.0.0.1:6379 127.0.0.1:6380 127.0.0.1:6381
#      127.0.0.1:7379 127.0.0.1:7380 127.0.0.1:7381
#      --cluster-replicas 1 --cluster-yes
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - slave-node-1
      - slave-node-2
      - slave-node-3